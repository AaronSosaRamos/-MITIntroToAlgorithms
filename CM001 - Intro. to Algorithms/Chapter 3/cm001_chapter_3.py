# -*- coding: utf-8 -*-
"""CM001 - Chapter 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17c0Few7HYyYQ07FJxuqjQZbv025ua_FV

# Asymptotic behavior of a function

*   Big O: Worst Case Scenario (Upper Bound - How slow the algo. is)
*   Big Theta (Θ): Average - Typical Case Scenario
*   Big Omega (Ω): Best Case Scenario (Lower Bound - How fast the algo. is)
"""

from sympy import symbols, O, oo, simplify

def big_o(expression):
    n = symbols('n')
    return simplify(O(expression, n).as_expr())

def big_theta(expression):
    n = symbols('n')
    return simplify(O(expression, n).simplify())

def big_omega(expression):
    n = symbols('n')
    return simplify(O(expression, n).simplify(infinity=oo))

expression = 'n**3 + 2*n**2 + 5*n + 1'
print("Big-O notation:", big_o(expression))
print("Big-Theta notation:", big_theta(expression))
print("Big-Omega notation:", big_omega(expression))

expression = 'n'
print("Big-O notation:", big_o(expression))
print("Big-Theta notation:", big_theta(expression))
print("Big-Omega notation:", big_omega(expression))

expression = 'n**(1/2)'
print("Big-O notation:", big_o(expression))
print("Big-Theta notation:", big_theta(expression))
print("Big-Omega notation:", big_omega(expression))

expression = 'nlog(n)'
print("Big-O notation:", big_o(expression))
print("Big-Theta notation:", big_theta(expression))
print("Big-Omega notation:", big_omega(expression))