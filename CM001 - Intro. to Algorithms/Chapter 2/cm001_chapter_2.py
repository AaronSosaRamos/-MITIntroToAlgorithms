# -*- coding: utf-8 -*-
"""CM001 - Chapter 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vRqFVV82mQisWTemlPWisbGimHMGYrUd

# Data Structures and Dynamic Arrays

# Interface vs Data Structure (According to Erik Demaine)

Interface:


*   Specification
*   What data can store
*   What operations can support
"""

class Queue:
    def __init__(self):
        self.items = 0
        pass

    def enqueue(self, item):
        pass

    def dequeue(self):
        pass

    def peek(self):
        pass

    def is_empty(self):
        pass

    def size(self):
        pass

"""Data Structure:


*   Representation
*   How to store data
*   Algorithms to support



"""

class ListQueue(Queue):
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        else:
            raise IndexError("Queue is empty")

    def peek(self):
        if not self.is_empty():
            return self.items[0]
        else:
            return None

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

"""#2 Main interfaces

# Set
"""

from abc import ABC, abstractmethod

class SetInterface(ABC):
    @abstractmethod
    def build(self, x):
        """Builds a new empty set or initializes with elements from iterable x."""
        pass

    @abstractmethod
    def add(self, x):
        """Adds element x to the set."""
        pass

    @abstractmethod
    def remove(self, x):
        """Removes element x from the set. Raises KeyError if x is not present."""
        pass

    @abstractmethod
    def contains(self, x):
        """Checks if element x is present in the set."""
        pass

    @abstractmethod
    def size(self):
        """Returns the number of elements in the set."""
        pass

    @abstractmethod
    def is_empty(self):
        """Returns True if the set is empty, False otherwise."""
        pass

    @abstractmethod
    def clear(self):
        """Removes all elements from the set."""
        pass

    @abstractmethod
    def union(self, other_set):
        """Returns a new set containing all elements present in either this set or other_set."""
        pass

    @abstractmethod
    def intersection(self, other_set):
        """Returns a new set containing all elements present in both this set and other_set."""
        pass

    @abstractmethod
    def difference(self, other_set):
        """Returns a new set containing all elements present in this set but not in other_set."""
        pass

    @abstractmethod
    def is_subset(self, other_set):
        """Checks whether all elements of this set are present in other_set."""
        pass

    @abstractmethod
    def is_disjoint(self, other_set):
        """Checks whether this set and other_set have no elements in common."""
        pass

"""# Sequence (StaticSequenceInterface)"""

from abc import ABC, abstractmethod

class StaticSequenceInterface(ABC):
    @abstractmethod
    def build(self, x):
        """Builds a new data structure."""
        pass

    @abstractmethod
    def len(self):
        """Returns the number of elements in the sequence."""
        pass

    @abstractmethod
    def iter_seq(self):
        """Output values in order."""
        pass

    @abstractmethod
    def get_at(self, i):
        """Return the value at index i."""
        pass

    @abstractmethod
    def set_at(self, i, x):
        """Set a new value x at index i."""
        pass

    @abstractmethod
    def get_first(self):
        """Return the first element of the sequence."""
        pass

    @abstractmethod
    def set_first(self, x):
        """Set the first element of the sequence."""
        pass

    @abstractmethod
    def get_last(self):
        """Return the last element of the sequence."""
        pass

    @abstractmethod
    def set_last(self, x):
        """Set the last element of the sequence."""
        pass

"""# Sequence (DynamicSequenceInterface)"""

from abc import ABC, abstractmethod

class DynamicSequenceInterface(ABC):
    @abstractmethod
    def build(self, x):
        """Builds a new data structure."""
        pass

    @abstractmethod
    def len(self):
        """Returns the number of elements in the sequence."""
        pass

    @abstractmethod
    def iter_seq(self):
        """Output values in order."""
        pass

    @abstractmethod
    def get_at(self, i):
        """Return the value at index i."""
        pass

    @abstractmethod
    def set_at(self, i, x):
        """Set a new value x at index i."""
        pass

    @abstractmethod
    def insert_at(self, i, x):
        """Insert a new value x at index i."""
        pass

    @abstractmethod
    def delete_at(self, i):
        """Delete the value at index i."""
        pass

    @abstractmethod
    def get_first(self):
        """Return the first element of the sequence."""
        pass

    @abstractmethod
    def set_first(self, x):
        """Set the first element of the sequence."""
        pass

    @abstractmethod
    def get_last(self):
        """Return the last element of the sequence."""
        pass

    @abstractmethod
    def set_last(self, x):
        """Set the last element of the sequence."""
        pass

"""# 2 Data Structures

# Arrays (Static and Dynamic)
"""

# Creating a static array with a fixed size
static_array = [None] * 5

static_array[0] = 1
static_array[1] = 2
static_array[2] = 3
static_array[3] = 4
static_array[4] = 5

print(static_array[2])

# Creating a dynamic array
dynamic_array = []

dynamic_array.append(1)
dynamic_array.append(2)
dynamic_array.append(3)
dynamic_array.append(4)
dynamic_array.append(5)

print(dynamic_array[2])

dynamic_array.append(6)
dynamic_array.append(7)

print(dynamic_array[5])

"""# Pointer-Based: Linked Lists

# Singly Linked List
"""

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def delete(self, data):
        if not self.head:
            return
        if self.head.data == data:
            self.head = self.head.next
            return
        prev_node = self.head
        current_node = self.head.next
        while current_node:
            if current_node.data == data:
                prev_node.next = current_node.next
                return
            prev_node = current_node
            current_node = current_node.next

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()


if __name__ == "__main__":
    sll = SinglyLinkedList()
    sll.insert_at_beginning(1)
    sll.insert_at_beginning(2)
    sll.insert_at_end(3)
    sll.insert_at_end(4)
    sll.display()
    sll.delete(3)
    sll.display()

"""# Circular Singly Linked List"""

class CircularSinglyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if not self.head:
            new_node.next = new_node
            self.head = new_node
            return
        temp = self.head
        while temp.next != self.head:
            temp = temp.next
        temp.next = new_node
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            new_node.next = new_node
            self.head = new_node
            return
        temp = self.head
        while temp.next != self.head:
            temp = temp.next
        temp.next = new_node
        new_node.next = self.head

    def delete(self, data):
        if not self.head:
            return
        if self.head.data == data:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            if self.head == self.head.next:
                self.head = None
            else:
                temp.next = self.head.next
                self.head = self.head.next
            return
        prev = None
        temp = self.head
        while temp.next != self.head:
            if temp.data == data:
                prev.next = temp.next
                return
            prev = temp
            temp = temp.next
        if temp.data == data:
            prev.next = temp.next

    def display(self):
        if not self.head:
            return
        temp = self.head
        while True:
            print(temp.data, end=" ")
            temp = temp.next
            if temp == self.head:
                break
        print()


if __name__ == "__main__":
    csll = CircularSinglyLinkedList()
    csll.insert_at_beginning(1)
    csll.insert_at_beginning(2)
    csll.insert_at_end(3)
    csll.insert_at_end(4)
    csll.display()
    csll.delete(3)
    csll.display()

"""# Doubly Linked List"""

class DoublyNode:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = DoublyNode(data)
        if not self.head:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def insert_at_end(self, data):
        new_node = DoublyNode(data)
        if not self.head:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node
            new_node.prev = temp

    def delete(self, data):
        if not self.head:
            return
        if self.head.data == data:
            if self.head.next:
                self.head = self.head.next
                self.head.prev = None
            else:
                self.head = None
            return
        temp = self.head
        while temp:
            if temp.data == data:
                if temp.next:
                    temp.prev.next = temp.next
                    temp.next.prev = temp.prev
                else:
                    temp.prev.next = None
                return
            temp = temp.next

    def display(self):
        temp = self.head
        while temp:
            print(temp.data, end=" ")
            temp = temp.next
        print()


if __name__ == "__main__":
    dll = DoublyLinkedList()
    dll.insert_at_beginning(1)
    dll.insert_at_beginning(2)
    dll.insert_at_end(3)
    dll.insert_at_end(4)
    dll.display()
    dll.delete(3)
    dll.display()

"""# Circular Doubly Linked List"""

class CircularDoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = DoublyNode(data)
        if not self.head:
            new_node.next = new_node
            new_node.prev = new_node
            self.head = new_node
        else:
            last_node = self.head.prev
            new_node.next = self.head
            new_node.prev = last_node
            self.head.prev = new_node
            last_node.next = new_node
            self.head = new_node

    def insert_at_end(self, data):
        new_node = DoublyNode(data)
        if not self.head:
            new_node.next = new_node
            new_node.prev = new_node
            self.head = new_node
        else:
            last_node = self.head.prev
            new_node.next = self.head
            new_node.prev = last_node
            self.head.prev = new_node
            last_node.next = new_node

    def delete(self, data):
        if not self.head:
            return
        current = self.head
        while True:
            if current.data == data:
                if current.next == current:
                    self.head = None
                else:
                    current.prev.next = current.next
                    current.next.prev = current.prev
                    if current == self.head:
                        self.head = current.next
                return
            current = current.next
            if current == self.head:
                break

    def display(self):
        if not self.head:
            return
        current = self.head
        while True:
            print(current.data, end=" ")
            current = current.next
            if current == self.head:
                break
        print()


if __name__ == "__main__":
    cdll = CircularDoublyLinkedList()
    cdll.insert_at_beginning(1)
    cdll.insert_at_beginning(2)
    cdll.insert_at_end(3)
    cdll.insert_at_end(4)
    cdll.display()
    cdll.delete(3)
    cdll.display()

"""Define the functions"""

import time
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict

def evaluate_efficiency(data_structure, operations, num_operations):
    start_time = time.time()
    for _ in range(num_operations):
        for op in operations:
            op(data_structure)
    end_time = time.time()
    return end_time - start_time

def evaluate(data_structures, operation_funcs, operation_names, num_operations):
    results = defaultdict(list)
    for ds_name, ds in data_structures.items():
        for op_name, op_func in zip(operation_names, operation_funcs):
            time_taken = evaluate_efficiency(ds(), [op_func], num_operations)
            results[op_name].append((ds_name, time_taken))
    return results

def plot_results(results, operation_names):
    for op_name in operation_names:
        plt.figure(figsize=(10, 6))
        plt.title(f"Efficiency of {op_name}")
        plt.xlabel("Data Structure")
        plt.ylabel("Time Taken (s)")
        for ds_name, time_taken in results[op_name]:
            plt.bar(ds_name, time_taken, label=ds_name)
        plt.legend()
        plt.tight_layout()
        plt.show()

"""Operations to evaluate"""

insertion_beginning = lambda ds: ds.insert_at_beginning(1)
insertion_end = lambda ds: ds.insert_at_end(1)
deletion = lambda ds: ds.delete(1)
traversal = lambda ds: ds.display()

"""Data structure names and operation names

"""

data_structures = {
    "SinglyLinkedList": SinglyLinkedList,
    "CircularSinglyLinkedList": CircularSinglyLinkedList,
    "DoublyLinkedList": DoublyLinkedList,
    "CircularDoublyLinkedList": CircularDoublyLinkedList
}
operation_names = ["Insertion at Beginning", "Insertion at End", "Deletion", "Traversal"]

"""Evaluate and plot results

"""

results = evaluate(data_structures, [insertion_beginning, insertion_end, deletion, traversal], operation_names, num_operations=1000)
plot_results(results, operation_names)