# -*- coding: utf-8 -*-
"""CM001 - Chapter 18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xWI-6Zavv9XqYd31XA4_Lq2mhU2PbwpA

#Rod Cutting
"""

def rod_cutting(lengths, prices, n):
    # Create a table to store solutions to subproblems
    dp = [0] * (n + 1)

    # Build up the table using bottom-up dynamic programming
    for i in range(1, n + 1):
        max_val = -1
        for j in range(i):
            max_val = max(max_val, prices[j] + dp[i - j - 1])
        dp[i] = max_val

    return dp[n]

# Example usage:
lengths = [1, 2, 3, 4, 5, 6, 7, 8]
prices = [1, 5, 8, 9, 10, 17, 17, 20]
rod_length = 4
max_profit = rod_cutting(lengths, prices, rod_length)
print("Maximum profit for rod length", rod_length, ":", max_profit)

"""#Subset sum"""

def subset_sum(nums, target):
    n = len(nums)
    # Create a table to store solutions to subproblems
    dp = [[False] * (target + 1) for _ in range(n + 1)]

    # Base case initialization
    for i in range(n + 1):
        dp[i][0] = True

    # Build up the table using bottom-up dynamic programming
    for i in range(1, n + 1):
        for j in range(1, target + 1):
            if nums[i - 1] <= j:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]
            else:
                dp[i][j] = dp[i - 1][j]

    return dp[n][target]

# Example usage:
nums = [2, 3, 7, 8, 10]
target = 11
result = subset_sum(nums, target)
if result:
    print("Subset with sum", target, "exists.")
else:
    print("No subset with sum", target, "exists.")

"""#Pseudopolynomial time example"""

def knapsack(values, weights, capacity):
    n = len(values)
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]

# Example usage:
values = [60, 100, 120]
weights = [10, 20, 30]
capacity = 50
max_value = knapsack(values, weights, capacity)
print("Maximum value that can be obtained:", max_value)