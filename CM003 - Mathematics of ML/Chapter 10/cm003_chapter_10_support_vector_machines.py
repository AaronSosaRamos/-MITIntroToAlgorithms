# -*- coding: utf-8 -*-
"""CM003 - Chapter 10 - Support Vector Machines.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HgT9k44fBYcPXyvB4_uLCQNW71s41jsk

#Support Vector Machines
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Load Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create SVC model
model_svc = SVC(kernel='rbf', C=1.0, gamma='scale')  # RBF kernel

# Train the model
model_svc.fit(X_train, y_train)

# Make predictions
y_pred_svc = model_svc.predict(X_test)

# Evaluate accuracy
accuracy_svc = accuracy_score(y_test, y_pred_svc)
print("SVC Accuracy:", accuracy_svc)

from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# Load Breast Cancer dataset
cancer = load_breast_cancer()
X = cancer.data
y = cancer.target

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create LinearSVC model
model_linear_svc = LinearSVC(C=1.0, loss='squared_hinge', max_iter=10000)

# Train the model
model_linear_svc.fit(X_train, y_train)

# Make predictions
y_pred_linear_svc = model_linear_svc.predict(X_test)

# Evaluate accuracy
accuracy_linear_svc = accuracy_score(y_test, y_pred_linear_svc)
print("LinearSVC Accuracy:", accuracy_linear_svc)

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import NuSVC
from sklearn.metrics import accuracy_score

# Load Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create NuSVC model
model_nu_svc = NuSVC(kernel='rbf', nu=0.5, gamma='scale')

# Train the model
model_nu_svc.fit(X_train, y_train)

# Make predictions
y_pred_nu_svc = model_nu_svc.predict(X_test)

# Evaluate accuracy
accuracy_nu_svc = accuracy_score(y_test, y_pred_nu_svc)
print("NuSVC Accuracy:", accuracy_nu_svc)

"""#Risk Bounds for SVM"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from scipy.special import comb

# Load Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train SVC model
model = SVC(kernel='rbf', C=1.0, gamma='scale')
model.fit(X_train, y_train)

# Evaluate accuracy on test set
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Test Accuracy:", accuracy)

# Estimate VC Dimension
def estimate_vc_dimension(model, X, y):
    n_samples = len(X)
    d = X.shape[1]  # Number of features
    support_vectors_count = np.sum(model.n_support_)  # Total support vectors
    vc_dimension = min(d, support_vectors_count) + 1
    return vc_dimension

vc_dimension = estimate_vc_dimension(model, X_train, y_train)
print("Estimated VC Dimension:", vc_dimension)

# Calculate Risk Bound
def risk_bound(accuracy, vc_dim, n):
    delta = 0.1  # Confidence level
    risk_bound = accuracy + np.sqrt((vc_dim * np.log(2 * n / vc_dim) + np.log(1 / delta)) / (2 * n))
    return risk_bound

n = len(X_train)
risk_bound_value = risk_bound(accuracy, vc_dimension, n)
print("Estimated Risk Bound:", risk_bound_value)