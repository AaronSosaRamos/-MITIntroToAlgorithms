# -*- coding: utf-8 -*-
"""CM003 - Chapter 9 - Boosting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ehP2lVwIeyRzxlJfZQHWNNlybKFzj9H

#Boosting
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier
import xgboost as xgb

# Load the Iris dataset
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# AdaBoost for Classification
ada_clf = AdaBoostClassifier(n_estimators=50, random_state=42)
ada_clf.fit(X_train, y_train)
y_pred_ada_clf = ada_clf.predict(X_test)
accuracy_ada_clf = accuracy_score(y_test, y_pred_ada_clf)
print("AdaBoost Classifier Accuracy:", accuracy_ada_clf)

# Gradient Boosting for Classification
grad_clf = GradientBoostingClassifier(n_estimators=100, random_state=42)
grad_clf.fit(X_train, y_train)
y_pred_grad_clf = grad_clf.predict(X_test)
accuracy_grad_clf = accuracy_score(y_test, y_pred_grad_clf)
print("Gradient Boosting Classifier Accuracy:", accuracy_grad_clf)

# XGBoost for Classification
xgb_clf = xgb.XGBClassifier(n_estimators=100, random_state=42)
xgb_clf.fit(X_train, y_train)
y_pred_xgb_clf = xgb_clf.predict(X_test)
accuracy_xgb_clf = accuracy_score(y_test, y_pred_xgb_clf)
print("XGBoost Classifier Accuracy:", accuracy_xgb_clf)

# Plot confusion matrix for AdaBoost
plt.figure(figsize=(8, 6))
cm_ada = confusion_matrix(y_test, y_pred_ada_clf)
plt.imshow(cm_ada, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for AdaBoost Classifier")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Plot confusion matrix for Gradient Boosting
plt.figure(figsize=(8, 6))
cm_grad = confusion_matrix(y_test, y_pred_grad_clf)
plt.imshow(cm_grad, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for Gradient Boosting Classifier")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Plot confusion matrix for XGBoost
plt.figure(figsize=(8, 6))
cm_xgb = confusion_matrix(y_test, y_pred_xgb_clf)
plt.imshow(cm_xgb, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for XGBoost Classifier")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
31.5 Support Vector Machinplt.show()

"""#Support Vector Machin"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.svm import SVC, LinearSVC

# Load the Iris dataset
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Support Vector Machine (SVM) with GridSearchCV for hyperparameter tuning
svm_param_grid = {'C': [0.1, 1, 10, 100],
                  'gamma': [0.01, 0.1, 1, 10],
                  'kernel': ['linear', 'rbf']}
svm_grid = GridSearchCV(SVC(random_state=42), param_grid=svm_param_grid, cv=5)
svm_grid.fit(X_train, y_train)
best_svm = svm_grid.best_estimator_

# Predictions using the best SVM model
y_pred_svm = best_svm.predict(X_test)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
print("Best SVM Accuracy:", accuracy_svm)
print("Best SVM Parameters:", svm_grid.best_params_)

# Linear Support Vector Machine (LinearSVC)
linear_svc = LinearSVC(random_state=42)
linear_svc.fit(X_train, y_train)

# Predictions using LinearSVC
y_pred_linear_svc = linear_svc.predict(X_test)
accuracy_linear_svc = accuracy_score(y_test, y_pred_linear_svc)
print("LinearSVC Accuracy:", accuracy_linear_svc)

# Plot confusion matrix for the best SVM model
plt.figure(figsize=(8, 6))
cm_svm = confusion_matrix(y_test, y_pred_svm)
plt.imshow(cm_svm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for Best SVM Classifier")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Plot confusion matrix for LinearSVC
plt.figure(figsize=(8, 6))
cm_linear_svc = confusion_matrix(y_test, y_pred_linear_svc)
plt.imshow(cm_linear_svc, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for LinearSVC Classifier")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

"""#Kernel Hilbert Spaces (RKHS)

"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.svm import SVC
from sklearn.metrics.pairwise import rbf_kernel

# Load the Iris dataset
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define a custom kernel function based on Gaussian RBF kernel
def custom_kernel(X1, X2):
    gamma = 0.1  # Gamma parameter for RBF kernel
    K = rbf_kernel(X1, X2, gamma=gamma)
    return K

# Support Vector Machine (SVM) with custom kernel (RKHS-based)
svm_rkhs = SVC(kernel=custom_kernel)
svm_rkhs.fit(X_train, y_train)

# Predictions using the RKHS-based SVM
y_pred_rkhs = svm_rkhs.predict(X_test)
accuracy_rkhs = accuracy_score(y_test, y_pred_rkhs)
print("RKHS-based SVM Accuracy:", accuracy_rkhs)

# Plot confusion matrix for RKHS-based SVM
plt.figure(figsize=(8, 6))
cm_rkhs = confusion_matrix(y_test, y_pred_rkhs)
plt.imshow(cm_rkhs, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for RKHS-based SVM")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

"""#Gaussian RBF kernel Classifier"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.svm import SVC

# Load the Iris dataset
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Support Vector Machine (SVM) with Gaussian RBF kernel
svm_rbf = SVC(kernel='rbf', gamma='scale')  # 'scale' is default for gamma
svm_rbf.fit(X_train, y_train)

# Predictions using the RBF kernel SVM
y_pred_rbf = svm_rbf.predict(X_test)
accuracy_rbf = accuracy_score(y_test, y_pred_rbf)
print("Gaussian RBF Kernel SVM Accuracy:", accuracy_rbf)

# Plot confusion matrix for Gaussian RBF Kernel SVM
plt.figure(figsize=(8, 6))
cm_rbf = confusion_matrix(y_test, y_pred_rbf)
plt.imshow(cm_rbf, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion Matrix for Gaussian RBF Kernel SVM")
plt.colorbar()
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()